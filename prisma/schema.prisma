datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id               String         @id @default(uuid())
    roleId           String
    role             Role           @relation(fields: [roleId], references: [id])
    gender           String
    firstname        String
    lastname         String
    email            String         @unique
    emailVerifiedAt  DateTime?
    password         String
    phone            String
    modelType        String
    hasMobileAccess  Boolean
    profilePhotoPath String?
    lastLoginAt      DateTime?
    lastLoginIp      String?
    refreshToken     RefreshToken[]
    createdCustomers Customer[]
    createdCompanies Company[]
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt

    @@map("users")
}

model Role {
    id          String       @id @default(uuid())
    name        String       @unique
    users       User[]
    permissions Permission[]
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt

    @@map("roles")
}

model Permission {
    id        String   @id @default(uuid())
    name      String   @unique
    roleId    String
    role      Role     @relation(fields: [roleId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("permissions")
}

model RefreshToken {
    id        String   @id @default(uuid())
    token     String   @unique
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    expiresAt DateTime
    createdAt DateTime @default(now())

    @@map("refresh_token")
}

model Company {
    id          String     @id @default(uuid())
    name        String
    address     String
    zipCode     String
    city        String
    country     String
    phone       String     @unique
    email       String     @unique
    status      String
    rc          String     @unique
    legalStatus String
    ice         String     @unique
    creatorId   String
    creator     User       @relation(fields: [creatorId], references: [id])
    customers   Customer[]
    deletedAt   DateTime?
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt

    @@map("companies")
}

model Customer {
    id           String        @id @default(uuid())
    type         String
    gender       String
    firstname    String
    lastname     String
    phone        String        @unique
    email        String        @unique
    adresse      String?
    zipCode      String?
    city         String?
    country      String?
    companyId    String?
    company      Company?      @relation(fields: [companyId], references: [id])
    shippingInfo ShippingInfo?
    statut       String
    creatorId    String
    creator      User          @relation(fields: [creatorId], references: [id])
    deletedAt    DateTime?
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt

    @@map("customers")
}

model ShippingInfo {
    id         String    @id @default(uuid())
    address    String
    zipCode    String
    city       String
    country    String
    customerId String    @unique
    customer   Customer  @relation(fields: [customerId], references: [id])
    deletedAt  DateTime?
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt

    @@map("shipping_infos")
}
